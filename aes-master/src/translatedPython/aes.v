// File: aes.v
// Generated by MyHDL 0.10
// Date: Thu Apr 26 00:18:21 2018


`timescale 1ns/10ps

module aes (
    clk,
    reset_n,
    cs,
    we,
    address,
    write_data,
    read_data
);


input clk;
input reset_n;
input cs;
input we;
input [7:0] address;
input [31:0] write_data;
output [31:0] read_data;
reg [31:0] read_data;

reg [127:0] result_reg;
reg core_ready;
reg core_valid;
reg block_we;
reg core_keylen;
reg key_we;
reg [255:0] core_key;
reg core_next;
reg encdec_reg;
reg keylen_reg;
reg config_we;
reg valid_reg;
reg init_reg;
reg next_new;
reg [127:0] core_block;
reg core_encdec;
reg [127:0] core_result;
reg core_init;
reg [31:0] tmp_read_data;
reg init_new;
reg next_reg;
reg ready_reg;
reg [127:0] core_enc_new_block;
reg core_dec_ready;
reg [1:0] core_aes_core_ctrl_reg;
reg [3:0] core_enc_round_nr;
reg [3:0] core_dec_round_nr;
reg [127:0] core_muxed_new_block;
reg core_dec_next;
wire [1:0] core_aes_core_ctrl_new;
wire core_aes_core_ctrl_we;
reg [127:0] core_round_key;
wire core_result_valid_new;
wire core_ready_we;
wire [31:0] core_new_sboxw;
reg [31:0] core_muxed_sboxw;
reg core_enc_ready;
reg [31:0] core_keymem_sboxw;
reg core_muxed_ready;
reg core_result_valid_reg;
wire core_result_valid_we;
reg [3:0] core_muxed_round_nr;
wire core_ready_new;
reg [127:0] core_dec_new_block;
reg core_key_ready;
wire core_state_init;
reg [31:0] core_enc_sboxw;
reg core_enc_next;
reg core_ready_reg;
wire core_keymem_round_ctr_rst;
reg core_keymem_round_ctr_we;
reg [3:0] core_keymem_round_ctr_new;
reg [2:0] core_keymem_key_mem_ctrl_reg;
wire [127:0] core_keymem_prev_key1_reg;
reg [127:0] core_keymem_tmp_round_key;
wire [127:0] core_keymem_prev_key0_new;
wire core_keymem_ready_we;
wire core_keymem_key_mem_we;
wire core_keymem_prev_key0_we;
wire core_keymem_prev_key1_we;
reg [7:0] core_keymem_rcon_reg;
wire [7:0] core_keymem_rcon_new;
wire [127:0] core_keymem_prev_key1_new;
wire core_keymem_key_mem_ctrl_we;
wire [127:0] core_keymem_key_mem_new;
wire [127:0] core_keymem_prev_key0_reg;
wire [2:0] core_keymem_key_mem_ctrl_new;
wire core_keymem_round_key_update;
wire [31:0] core_keymem_tmp_sboxw;
wire core_keymem_rcon_we;
wire core_keymem_ready_new;
reg [3:0] core_keymem_round_ctr_reg;
wire core_keymem_round_ctr_inc;
reg core_keymem_ready_reg;
reg [31:0] core_dec_block_block_w2_reg;
reg core_dec_block_round_ctr_dec;
reg [31:0] core_dec_block_block_w0_reg;
wire [3:0] core_dec_block_round_ctr_new;
reg [2:0] core_dec_block_dec_ctrl_reg;
reg core_dec_block_sword_ctr_we;
reg core_dec_block_sword_ctr_rst;
reg core_dec_block_ready_we;
reg [31:0] core_dec_block_block_w1_reg;
reg core_dec_block_dec_ctrl_we;
reg [2:0] core_dec_block_dec_ctrl_new;
reg core_dec_block_round_ctr_set;
wire core_dec_block_block_w2_we;
wire core_dec_block_block_w3_we;
reg [1:0] core_dec_block_sword_ctr_reg;
reg core_dec_block_sword_ctr_inc;
reg [3:0] core_dec_block_round_ctr_reg;
wire core_dec_block_block_w0_we;
reg core_dec_block_round_ctr_we;
wire core_dec_block_block_w1_we;
reg [1:0] core_dec_block_sword_ctr_new;
reg [31:0] core_dec_block_block_w3_reg;
reg core_dec_block_ready_new;
wire [127:0] core_dec_block_block_new;
reg [2:0] core_dec_block_update_type;
wire [31:0] core_dec_block_new_sboxw;
wire [31:0] core_dec_block_tmp_sboxw;
reg core_dec_block_ready_reg;
reg [31:0] core_enc_block_block_w2_reg;
wire core_enc_block_round_ctr_rst;
wire core_enc_block_enc_ctrl_we;
reg [31:0] core_enc_block_block_w0_reg;
wire [3:0] core_enc_block_round_ctr_new;
reg core_enc_block_sword_ctr_we;
wire [2:0] core_enc_block_enc_ctrl_new;
wire core_enc_block_sword_ctr_rst;
wire core_enc_block_ready_we;
reg [31:0] core_enc_block_block_w1_reg;
wire core_enc_block_block_w2_we;
wire core_enc_block_block_w3_we;
reg [2:0] core_enc_block_enc_ctrl_reg;
reg [1:0] core_enc_block_sword_ctr_reg;
wire core_enc_block_sword_ctr_inc;
reg [3:0] core_enc_block_round_ctr_reg;
wire core_enc_block_block_w0_we;
wire [31:0] core_enc_block_muxed_sboxw;
wire core_enc_block_round_ctr_we;
wire core_enc_block_block_w1_we;
reg [1:0] core_enc_block_sword_ctr_new;
reg [31:0] core_enc_block_block_w3_reg;
wire core_enc_block_ready_new;
wire [127:0] core_enc_block_block_new;
wire [2:0] core_enc_block_update_type;
wire core_enc_block_round_ctr_inc;
reg core_enc_block_ready_reg;
reg [31:0] key_reg [0:8-1];
reg [31:0] block_reg [0:4-1];
reg [127:0] core_keymem_key_mem [0:15-1];

assign core_aes_core_ctrl_new = 2'd0;
assign core_aes_core_ctrl_we = 1'd0;
assign core_result_valid_new = 1'd0;
assign core_ready_we = 1'd0;
assign core_new_sboxw = 32'd0;
assign core_result_valid_we = 1'd0;
assign core_ready_new = 1'd0;
assign core_state_init = 1'd0;
assign core_keymem_round_ctr_rst = 1'd0;
assign core_keymem_prev_key1_reg = 128'd0;
assign core_keymem_prev_key0_new = 128'd0;
assign core_keymem_ready_we = 1'd0;
assign core_keymem_key_mem_we = 1'd0;
assign core_keymem_prev_key0_we = 1'd0;
assign core_keymem_prev_key1_we = 1'd0;
assign core_keymem_rcon_new = 8'd0;
assign core_keymem_prev_key1_new = 128'd0;
assign core_keymem_key_mem_ctrl_we = 1'd0;
assign core_keymem_key_mem_new = 128'd0;
assign core_keymem_prev_key0_reg = 128'd0;
assign core_keymem_key_mem_ctrl_new = 3'd0;
assign core_keymem_round_key_update = 1'd0;
assign core_keymem_tmp_sboxw = 32'd0;
assign core_keymem_rcon_we = 1'd0;
assign core_keymem_ready_new = 1'd0;
assign core_keymem_round_ctr_inc = 1'd0;
assign core_dec_block_round_ctr_new = 4'd0;
assign core_dec_block_block_w2_we = 1'd0;
assign core_dec_block_block_w3_we = 1'd0;
assign core_dec_block_block_w0_we = 1'd0;
assign core_dec_block_block_w1_we = 1'd0;
assign core_dec_block_block_new = 128'd0;
assign core_dec_block_new_sboxw = 32'd0;
assign core_dec_block_tmp_sboxw = 32'd0;
assign core_enc_block_round_ctr_rst = 1'd0;
assign core_enc_block_enc_ctrl_we = 1'd0;
assign core_enc_block_round_ctr_new = 4'd0;
assign core_enc_block_enc_ctrl_new = 3'd0;
assign core_enc_block_sword_ctr_rst = 1'd0;
assign core_enc_block_ready_we = 1'd0;
assign core_enc_block_block_w2_we = 1'd0;
assign core_enc_block_block_w3_we = 1'd0;
assign core_enc_block_sword_ctr_inc = 1'd0;
assign core_enc_block_block_w0_we = 1'd0;
assign core_enc_block_muxed_sboxw = 32'd0;
assign core_enc_block_round_ctr_we = 1'd0;
assign core_enc_block_block_w1_we = 1'd0;
assign core_enc_block_ready_new = 1'd0;
assign core_enc_block_block_new = 128'd0;
assign core_enc_block_update_type = 3'd0;
assign core_enc_block_round_ctr_inc = 1'd0;


always @(core_enc_block_block_w2_reg, core_enc_block_block_w1_reg, core_enc_block_block_w3_reg, core_enc_block_block_w0_reg, core_enc_block_round_ctr_reg, core_enc_block_muxed_sboxw, core_enc_block_ready_reg) begin: AES_CORE_ENC_BLOCK_LOGIC
    core_enc_round_nr = core_enc_block_round_ctr_reg;
    core_enc_new_block[127-1:92] = core_enc_block_block_w0_reg;
    core_enc_new_block[91-1:64] = core_enc_block_block_w1_reg;
    core_enc_new_block[63-1:32] = core_enc_block_block_w2_reg;
    core_enc_new_block[31-1:0] = core_enc_block_block_w3_reg;
    core_enc_ready = core_enc_block_ready_reg;
    core_enc_sboxw = core_enc_block_muxed_sboxw;
end


always @(posedge clk, negedge reset_n) begin: AES_CORE_ENC_BLOCK_REG_UPDATE
    reg [6-1:0] CTRL_IDLE;
    if ((!reset_n)) begin
        core_enc_block_block_w0_reg <= 0;
        core_enc_block_block_w1_reg <= 0;
        core_enc_block_block_w2_reg <= 0;
        core_enc_block_block_w3_reg <= 0;
        core_enc_block_sword_ctr_reg <= 0;
        core_enc_block_round_ctr_reg <= 0;
        core_enc_block_ready_reg <= 1;
        core_enc_block_enc_ctrl_reg <= CTRL_IDLE;
    end
    else begin
        if (core_enc_block_block_w0_we) begin
            core_enc_block_block_w0_reg <= core_enc_block_block_new[127-1:96];
        end
        if (core_enc_block_block_w1_we) begin
            core_enc_block_block_w1_reg <= core_enc_block_block_new[95-1:64];
        end
        if (core_enc_block_block_w2_we) begin
            core_enc_block_block_w2_reg <= core_enc_block_block_new[63-1:32];
        end
        if (core_enc_block_block_w3_we) begin
            core_enc_block_block_w3_reg <= core_enc_block_block_new[31-1:0];
        end
        if (core_enc_block_sword_ctr_we) begin
            core_enc_block_sword_ctr_reg <= core_enc_block_sword_ctr_new;
        end
        if (core_enc_block_round_ctr_we) begin
            core_enc_block_round_ctr_reg <= core_enc_block_round_ctr_new;
        end
        if (core_enc_block_ready_we) begin
            core_enc_block_ready_reg <= core_enc_block_ready_new;
        end
        if (core_enc_block_enc_ctrl_we) begin
            core_enc_block_enc_ctrl_reg <= core_enc_block_enc_ctrl_new;
        end
    end
end


always @(core_enc_block_sword_ctr_rst, core_enc_block_sword_ctr_inc) begin: AES_CORE_ENC_BLOCK_SWORD_CTR
    core_enc_block_sword_ctr_new <= 0;
    core_enc_block_sword_ctr_we <= 0;
    if (core_enc_block_sword_ctr_rst) begin
        core_enc_block_sword_ctr_new <= 0;
        core_enc_block_sword_ctr_we <= 1;
    end
    else if (core_enc_block_sword_ctr_inc) begin
        core_enc_block_sword_ctr_new <= (core_enc_block_sword_ctr_reg + 1);
        core_enc_block_sword_ctr_we <= 1;
    end
end


always @(core_enc_block_round_ctr_rst, core_enc_block_round_ctr_inc, core_keylen) begin: AES_CORE_ENC_BLOCK_ROUND_CTR
    reg [6-1:0] round_ctr_new;
    reg round_ctr_we;
    round_ctr_new = 0;
    round_ctr_we = 0;
    if (core_enc_block_round_ctr_rst) begin
        round_ctr_new <= 0;
        round_ctr_we <= 1;
    end
    else begin
        if (core_enc_block_round_ctr_inc) begin
            round_ctr_new <= (core_enc_block_round_ctr_reg + 1);
            round_ctr_we <= 1;
        end
    end
end


always @(core_dec_block_block_w2_reg, core_dec_block_block_w1_reg, core_dec_block_block_w3_reg, core_dec_block_block_w0_reg, core_dec_block_round_ctr_reg, core_dec_block_ready_reg) begin: AES_CORE_DEC_BLOCK_LOGIC
    core_dec_round_nr = core_dec_block_round_ctr_reg;
    core_dec_new_block[127-1:92] = core_dec_block_block_w0_reg;
    core_dec_new_block[91-1:64] = core_dec_block_block_w1_reg;
    core_dec_new_block[63-1:32] = core_dec_block_block_w2_reg;
    core_dec_new_block[31-1:0] = core_dec_block_block_w3_reg;
    core_dec_ready = core_dec_block_ready_reg;
end


always @(posedge clk, negedge reset_n) begin: AES_CORE_DEC_BLOCK_REG_UPDATE
    reg [6-1:0] CTRL_IDLE;
    if ((!reset_n)) begin
        core_dec_block_block_w0_reg <= 0;
        core_dec_block_block_w1_reg <= 0;
        core_dec_block_block_w2_reg <= 0;
        core_dec_block_block_w3_reg <= 0;
        core_dec_block_sword_ctr_reg <= 0;
        core_dec_block_round_ctr_reg <= 0;
        core_dec_block_ready_reg <= 0;
        core_dec_block_dec_ctrl_reg <= CTRL_IDLE;
    end
    else begin
        if (core_dec_block_block_w0_we) begin
            core_dec_block_block_w0_reg <= core_dec_block_block_new[127-1:96];
        end
        if (core_dec_block_block_w1_we) begin
            core_dec_block_block_w1_reg <= core_dec_block_block_new[95-1:64];
        end
        if (core_dec_block_block_w2_we) begin
            core_dec_block_block_w2_reg <= core_dec_block_block_new[63-1:32];
        end
        if (core_dec_block_block_w3_we) begin
            core_dec_block_block_w3_reg <= core_dec_block_block_new[31-1:0];
        end
        if (core_dec_block_sword_ctr_we) begin
            core_dec_block_sword_ctr_reg <= core_dec_block_sword_ctr_new;
        end
        if (core_dec_block_round_ctr_we) begin
            core_dec_block_round_ctr_reg <= core_dec_block_round_ctr_new;
        end
        if (core_dec_block_ready_we) begin
            core_dec_block_ready_reg <= core_dec_block_ready_new;
        end
        if (core_dec_block_dec_ctrl_we) begin
            core_dec_block_dec_ctrl_reg <= core_dec_block_dec_ctrl_new;
        end
    end
end


always @(core_dec_block_sword_ctr_rst, core_dec_block_sword_ctr_inc) begin: AES_CORE_DEC_BLOCK_SWORD_CTR
    core_dec_block_sword_ctr_new <= 0;
    core_dec_block_sword_ctr_we <= 0;
    if (core_dec_block_sword_ctr_rst) begin
        core_dec_block_sword_ctr_new <= 0;
        core_dec_block_sword_ctr_we <= 1;
    end
    else if (core_dec_block_sword_ctr_inc) begin
        core_dec_block_sword_ctr_new <= (core_dec_block_sword_ctr_reg + 1);
        core_dec_block_sword_ctr_we <= 1;
    end
end


always @(core_dec_block_round_ctr_set, core_dec_block_round_ctr_dec, core_keylen) begin: AES_CORE_DEC_BLOCK_ROUND_CTR
    reg [3-1:0] AES_256_BIT_KEY;
    reg [6-1:0] AES256_ROUNDS;
    reg [6-1:0] round_ctr_new;
    reg [6-1:0] AES128_ROUNDS;
    round_ctr_new = 0;
    core_dec_block_round_ctr_we <= 0;
    if (core_dec_block_round_ctr_set) begin
        if ((core_keylen == AES_256_BIT_KEY)) begin
            round_ctr_new <= AES256_ROUNDS;
        end
        else begin
            round_ctr_new <= AES128_ROUNDS;
        end
        core_dec_block_round_ctr_we <= 1;
    end
    else if (core_dec_block_round_ctr_dec) begin
        round_ctr_new <= (core_dec_block_round_ctr_reg - 1);
        core_dec_block_round_ctr_we <= 1;
    end
end


always @(core_dec_block_dec_ctrl_reg, core_dec_next) begin: AES_CORE_DEC_BLOCK_DECIPHER_CTRL
    reg [6-1:0] CTRL_MAIN;
    reg [6-1:0] CTRL_SBOX;
    reg [6-1:0] SBOX_UPDATE;
    reg [6-1:0] INIT_UPDATE;
    reg [6-1:0] MAIN_UPDATE;
    reg [6-1:0] FINAL_UPDATE;
    reg [6-1:0] CTRL_INIT;
    reg [6-1:0] NO_UPDATE;
    reg [6-1:0] CTRL_IDLE;
    core_dec_block_sword_ctr_inc <= 0;
    core_dec_block_sword_ctr_rst <= 0;
    core_dec_block_round_ctr_dec <= 0;
    core_dec_block_round_ctr_set <= 0;
    core_dec_block_ready_new <= 0;
    core_dec_block_ready_we <= 0;
    core_dec_block_update_type <= NO_UPDATE;
    core_dec_block_dec_ctrl_new <= CTRL_IDLE;
    core_dec_block_dec_ctrl_we <= 0;
    if ((core_dec_block_dec_ctrl_reg == CTRL_IDLE)) begin
        if (core_dec_next) begin
            core_dec_block_round_ctr_set <= 1;
            core_dec_block_ready_new <= 0;
            core_dec_block_ready_we <= 1;
            core_dec_block_dec_ctrl_new <= CTRL_INIT;
            core_dec_block_dec_ctrl_we <= 1;
        end
    end
    if ((core_dec_block_dec_ctrl_reg == CTRL_INIT)) begin
        core_dec_block_sword_ctr_rst <= 1;
        core_dec_block_update_type <= INIT_UPDATE;
        core_dec_block_dec_ctrl_new <= CTRL_SBOX;
        core_dec_block_dec_ctrl_we <= 1;
    end
    if ((core_dec_block_dec_ctrl_reg == CTRL_SBOX)) begin
        core_dec_block_sword_ctr_inc <= 1;
        core_dec_block_update_type <= SBOX_UPDATE;
        if ((core_dec_block_sword_ctr_reg == 3)) begin
            core_dec_block_round_ctr_dec <= 1;
            core_dec_block_dec_ctrl_new <= CTRL_MAIN;
            core_dec_block_dec_ctrl_we <= 1;
        end
    end
    if ((core_dec_block_dec_ctrl_reg == CTRL_MAIN)) begin
        core_dec_block_sword_ctr_rst <= 1;
        if ((core_dec_block_round_ctr_reg > 0)) begin
            core_dec_block_update_type <= MAIN_UPDATE;
            core_dec_block_dec_ctrl_new <= CTRL_SBOX;
            core_dec_block_dec_ctrl_we <= 1;
        end
        else begin
            core_dec_block_update_type <= FINAL_UPDATE;
            core_dec_block_ready_new <= 1;
            core_dec_block_ready_we <= 1;
            core_dec_block_dec_ctrl_new <= CTRL_IDLE;
            core_dec_block_dec_ctrl_we <= 1;
        end
    end
end


always @(core_keymem_tmp_sboxw, core_keymem_ready_reg, core_keymem_tmp_round_key) begin: AES_CORE_KEYMEM_LOGIC
    core_round_key = core_keymem_tmp_round_key;
    core_key_ready = core_keymem_ready_reg;
    core_keymem_sboxw = core_keymem_tmp_sboxw;
end


always @(core_keymem_round_ctr_reg, core_keymem_key_mem[0], core_keymem_key_mem[1], core_keymem_key_mem[2], core_keymem_key_mem[3], core_keymem_key_mem[4], core_keymem_key_mem[5], core_keymem_key_mem[6], core_keymem_key_mem[7], core_keymem_key_mem[8], core_keymem_key_mem[9], core_keymem_key_mem[10], core_keymem_key_mem[11], core_keymem_key_mem[12], core_keymem_key_mem[13], core_keymem_key_mem[14]) begin: AES_CORE_KEYMEM_KEY_MEM_READ
    core_keymem_tmp_round_key <= core_keymem_key_mem[core_keymem_round_ctr_reg];
end


always @(posedge clk, negedge reset_n) begin: AES_CORE_KEYMEM_REG_UPDATE
    integer i;
    reg [128-1:0] prev_key0_reg;
    reg [6-1:0] CTRL_IDLE;
    reg [128-1:0] prev_key1_reg;
    if ((!reset_n)) begin
        for (i=0; i<15; i=i+1) begin
            core_keymem_key_mem[i] <= 0;
        end
        core_keymem_rcon_reg <= 0;
        core_keymem_ready_reg <= 0;
        core_keymem_round_ctr_reg <= 0;
        core_keymem_key_mem_ctrl_reg <= CTRL_IDLE;
    end
    else begin
        if (core_keymem_round_ctr_we) begin
            core_keymem_round_ctr_reg <= core_keymem_round_ctr_new;
        end
        if (core_keymem_ready_we) begin
            core_keymem_ready_reg <= core_keymem_ready_new;
        end
        if (core_keymem_rcon_we) begin
            core_keymem_rcon_reg <= core_keymem_rcon_new;
        end
        if (core_keymem_key_mem_we) begin
            core_keymem_key_mem[core_keymem_round_ctr_reg] = core_keymem_key_mem_new;
        end
        if (core_keymem_prev_key0_we) begin
            prev_key0_reg = core_keymem_prev_key0_new;
        end
        if (core_keymem_prev_key1_we) begin
            prev_key1_reg = core_keymem_prev_key1_new;
        end
        if (core_keymem_key_mem_ctrl_we) begin
            core_keymem_key_mem_ctrl_reg <= core_keymem_key_mem_ctrl_new;
        end
    end
end


always @(core_keymem_round_ctr_rst, core_keymem_round_ctr_inc, core_keymem_round_ctr_reg) begin: AES_CORE_KEYMEM_ROUND_CTR
    core_keymem_round_ctr_new <= 0;
    core_keymem_round_ctr_we <= 0;
    if (core_keymem_round_ctr_rst) begin
        core_keymem_round_ctr_new <= 0;
        core_keymem_round_ctr_we <= 1;
    end
    else if (core_keymem_round_ctr_inc) begin
        core_keymem_round_ctr_new <= (core_keymem_round_ctr_reg + 1);
        core_keymem_round_ctr_we <= 1;
    end
end


always @(core_result_valid_reg, core_muxed_new_block, core_ready_reg) begin: AES_CORE_LOGIC
    core_ready = core_ready_reg;
    core_result = core_muxed_new_block;
    core_valid = core_result_valid_reg;
end


always @(posedge clk, negedge reset_n) begin: AES_CORE_REG_UPDATE
    reg [5-1:0] CTRL_IDLE;
    if ((!reset_n)) begin
        core_result_valid_reg <= 0;
        core_ready_reg <= 1;
        core_aes_core_ctrl_reg <= CTRL_IDLE;
    end
    else begin
        if (core_result_valid_we) begin
            core_result_valid_reg <= core_result_valid_new;
        end
        if (core_ready_we) begin
            core_ready_reg <= core_ready_new;
        end
        if (core_aes_core_ctrl_we) begin
            core_aes_core_ctrl_reg <= core_aes_core_ctrl_new;
        end
    end
end


always @(core_state_init, core_keymem_sboxw, core_enc_sboxw) begin: AES_CORE_SBOX_MUX
    if (core_state_init) begin
        core_muxed_sboxw <= core_keymem_sboxw;
    end
    else begin
        core_muxed_sboxw <= core_enc_sboxw;
    end
end


always @(core_encdec, core_next, core_enc_round_nr, core_enc_new_block, core_enc_ready) begin: AES_CORE_ENCDEC_MUX
    core_enc_next <= 0;
    core_dec_next <= 0;
    if (core_encdec) begin
        core_enc_next <= core_next;
        core_muxed_round_nr <= core_enc_round_nr;
        core_muxed_new_block <= core_enc_new_block;
        core_muxed_ready <= core_enc_ready;
    end
    else begin
        core_dec_next <= core_next;
        core_muxed_round_nr <= core_dec_round_nr;
        core_muxed_new_block <= core_dec_new_block;
        core_muxed_ready <= core_dec_ready;
    end
end


always @(address, cs, we, write_data, key_reg[0], key_reg[1], key_reg[2], key_reg[3], key_reg[4], key_reg[5], key_reg[6], key_reg[7], block_reg[0], block_reg[1], block_reg[2], block_reg[3], keylen_reg, encdec_reg, next_reg, init_reg, result_reg, valid_reg, ready_reg) begin: AES_API
    reg [8-1:0] ADDR_VERSION;
    reg [8-1:0] ADDR_CTRL;
    reg [8-1:0] ADDR_RESULT0;
    reg [8-1:0] ADDR_KEY0;
    reg [8-1:0] ADDR_KEY7;
    reg [8-1:0] ADDR_STATUS;
    reg [8-1:0] ADDR_RESULT3;
    reg [8-1:0] ADDR_NAME1;
    reg [8-1:0] ADDR_NAME0;
    reg [8-1:0] ADDR_BLOCK0;
    reg [8-1:0] ADDR_BLOCK3;
    init_new <= 0;
    next_new <= 0;
    config_we <= 0;
    key_we <= 0;
    block_we <= 0;
    tmp_read_data <= 0;
    if (cs) begin
        if (we) begin
            if ((address == ADDR_CTRL)) begin
                init_new <= write_data[1'b0];
                next_new <= write_data[1'b1];
            end
            if ((address == address)) begin
                config_we <= 1;
            end
            if (((address >= ADDR_KEY0) && (address <= ADDR_KEY7))) begin
                key_we <= 1;
            end
            if (((address >= ADDR_BLOCK0) && (address <= ADDR_BLOCK3))) begin
                block_we <= 1;
            end
        end
    end
    else begin
        if (address) begin
            if ((address == ADDR_NAME0)) begin
                tmp_read_data <= 32'h61657320;
            end
            else if ((address == ADDR_NAME1)) begin
                tmp_read_data <= 538976288;
            end
            else if ((address == ADDR_VERSION)) begin
                tmp_read_data <= 808334896;
            end
            else if ((address == ADDR_CTRL)) begin
                tmp_read_data[32-1:4] <= 0;
                tmp_read_data[4-1:3] <= keylen_reg;
                tmp_read_data[3-1:2] <= encdec_reg;
                tmp_read_data[2-1:1] <= next_reg;
                tmp_read_data[1-1:0] <= init_reg;
            end
            else if ((address == ADDR_STATUS)) begin
                tmp_read_data[32-1:2] <= 0;
                tmp_read_data[2-1:1] <= valid_reg;
                tmp_read_data[1-1:0] <= ready_reg;
            end
        end
        if (((address >= ADDR_RESULT0) && (address <= ADDR_RESULT3))) begin
            if ((address == 48)) begin
                tmp_read_data <= result_reg[128-1:96];
            end
            if ((address == 49)) begin
                tmp_read_data <= result_reg[96-1:64];
            end
            if ((address == 50)) begin
                tmp_read_data <= result_reg[64-1:32];
            end
            if ((address == 51)) begin
                tmp_read_data <= result_reg[32-1:0];
            end
        end
    end
end


always @(posedge clk, negedge reset_n) begin: AES_REG_UPDATE
    integer i;
    if ((!reset_n)) begin
        for (i=0; i<4; i=i+1) begin
            block_reg[i] <= 0;
        end
        for (i=0; i<8; i=i+1) begin
            key_reg[i] <= 0;
        end
        init_reg <= 0;
        next_reg <= 0;
        encdec_reg <= 0;
        keylen_reg <= 0;
        result_reg <= 0;
        valid_reg <= 0;
        ready_reg <= 0;
    end
    else begin
        ready_reg <= core_ready;
        valid_reg <= core_valid;
        result_reg <= core_result;
        init_reg <= init_new;
        next_reg <= next_new;
        if (config_we) begin
            encdec_reg <= write_data[1'b0];
            keylen_reg <= write_data[1'b1];
        end
        if (key_we) begin
            key_reg[address[2-1:0]] <= write_data;
        end
        if (block_we) begin
            block_reg[address[1-1:0]] <= write_data;
        end
    end
end


always @(block_reg[0], block_reg[1], block_reg[2], block_reg[3], encdec_reg, tmp_read_data, init_reg, next_reg, key_reg[0], key_reg[1], key_reg[2], key_reg[3], key_reg[4], key_reg[5], key_reg[6], key_reg[7], keylen_reg) begin: AES_LOGIC
    read_data = tmp_read_data;
    core_key[256-1:224] = key_reg[0];
    core_key[224-1:192] = key_reg[1];
    core_key[192-1:160] = key_reg[2];
    core_key[160-1:128] = key_reg[3];
    core_key[128-1:96] = key_reg[4];
    core_key[96-1:64] = key_reg[5];
    core_key[64-1:32] = key_reg[6];
    core_key[32-1:0] = key_reg[7];
    core_block[128-1:96] = block_reg[0];
    core_block[96-1:64] = block_reg[1];
    core_block[64-1:32] = block_reg[2];
    core_block[32-1:0] = block_reg[3];
    core_init = init_reg;
    core_next = next_reg;
    core_encdec = encdec_reg;
    core_keylen = keylen_reg;
end

endmodule
